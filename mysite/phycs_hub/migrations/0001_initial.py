# Generated by Django 5.2 on 2025-04-18 06:46

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Olympiad',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=32, null=True)),
                ('description', models.TextField()),
                ('logo_url', models.URLField(blank=True, null=True)),
                ('logo_storage_path', models.CharField(blank=True, max_length=255, null=True)),
                ('cover_url', models.URLField(blank=True, null=True)),
                ('cover_storage_path', models.CharField(blank=True, max_length=255, null=True)),
                ('regulations_url', models.URLField(blank=True, null=True)),
                ('regulations_storage_path', models.CharField(blank=True, max_length=255, null=True)),
                ('registration_start', models.DateField()),
                ('registration_end', models.DateField()),
                ('results_date', models.DateField(blank=True, null=True)),
                ('results_url', models.URLField(blank=True, null=True)),
                ('participant_count', models.PositiveIntegerField(default=0)),
                ('socialLinks', models.URLField(blank=True)),
                ('registrationFormUrl', models.URLField(blank=True)),
                ('organizers', models.CharField(blank=True, max_length=52, null=True)),
                ('stages', models.CharField(blank=True, max_length=52, null=True)),
                ('regions', models.CharField(blank=True, max_length=52, null=True)),
                ('priority', models.CharField(blank=True, max_length=72, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('logo_url', models.URLField(blank=True, null=True)),
                ('link', models.URLField()),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=32, null=True)),
                ('description', models.TextField()),
                ('images', models.ImageField(blank=True, null=True, upload_to='images/product')),
                ('imageStoragePaths', models.ImageField(blank=True, null=True, upload_to='image/storage')),
                ('inStock', models.BooleanField(blank=True)),
                ('sizes', models.CharField(blank=True, max_length=32, null=True)),
                ('type', models.CharField(blank=True, max_length=82, null=True)),
                ('price', models.PositiveIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='images/')),
                ('bio', models.TextField()),
                ('education', models.CharField(blank=True, max_length=62, null=True, verbose_name='Образование')),
                ('achievements', models.CharField(blank=True, max_length=62, null=True, verbose_name='достижения')),
                ('roles', models.CharField(blank=True, max_length=62, null=True)),
                ('projects', models.CharField(blank=True, max_length=72, null=True)),
                ('interests', models.CharField(blank=True, max_length=62, null=True)),
                ('contacts', models.CharField(blank=True, max_length=62, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Stage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('date', models.DateField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('practise_link', models.URLField(blank=True, null=True)),
                ('olympiad', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='olympiad_stages', to='phycs_hub.olympiad')),
            ],
        ),
        migrations.CreateModel(
            name='Material',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=32, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('authors', models.CharField(blank=True, max_length=32, null=True)),
                ('filepath', models.FileField(upload_to='materials/')),
                ('source', models.URLField(blank=True)),
                ('sourceLabel', models.TextField(blank=True, null=True)),
                ('storagePath', models.CharField(blank=True, max_length=255, null=True)),
                ('tags', models.ManyToManyField(blank=True, related_name='materials', to='phycs_hub.tag')),
            ],
        ),
    ]
